{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { ICourse, ICourseResponse, ICoursesResponse, ILeaderboardResponse } from '../models/golf';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ServiceService = /*#__PURE__*/(() => {\n  class ServiceService {\n    // MOVE TO HTTP INTECEPTOR\n    constructor(http) {\n      this.http = http;\n      this.authorizationToken = 'DY2Z5BX9EX8PVFTAWH7G';\n      this.url = 'https://golf-tech-test.airg.dev/api/1/';\n    }\n    getCourses() {\n      const headers = new HttpHeaders().set('Authorization', this.authorizationToken);\n      return this.http.get(`${this.url}courses/`, {\n        headers\n      }).pipe(map(response => response.data));\n    }\n    getCourse(course_id) {\n      const headers = new HttpHeaders().set('Authorization', this.authorizationToken);\n      return this.http.get(`${this.url}courses/${course_id}/`, {\n        headers\n      }).pipe(map(response => response.data));\n    }\n    getEvents() {\n      const headers = new HttpHeaders().set('Authorization', this.authorizationToken);\n      return this.http.get(`${this.url}events/`, {\n        headers\n      });\n    }\n    getLeaderBoard(event_id) {\n      const headers = new HttpHeaders().set('Authorization', this.authorizationToken);\n      return this.http.get(`${this.url}events/${event_id}/leaderboard/`, {\n        headers\n      }).pipe(map(response => {\n        // const data = response.data;\n        // const requests = [];\n        // data.forEach( player => {\n        //   requests.push(this.getPlayerInfo(event_id, player.player_id));\n        // });\n        // // call these, combinelatest txjs func\n        // // on results, enhance the data on the original response\n        // // return of(data)\n        // return combineLatest(requests).pipe(take(1)).subscribe(allPlayersInfo => {\n        //   console.log(allPlayersInfo);\n        //   return data;\n        // });\n        return response.data;\n      }));\n    }\n    getPlayerInfo(eventId_number, player_id) {\n      const headers = new HttpHeaders().set('Authorization', this.authorizationToken);\n      return this.http.get(`${this.url}events/${eventId_number}/player/${player_id}/`, {\n        headers\n      }).pipe(map(response => response.data));\n    }\n  }\n  ServiceService.ɵfac = function ServiceService_Factory(t) {\n    return new (t || ServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceService,\n    factory: ServiceService.ɵfac\n  });\n  return ServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}